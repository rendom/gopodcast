// Code generated by protoc-gen-go. DO NOT EDIT.
// source: subscription.proto

package subscription

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Paginate this?
type GetSubscriptionsRequest struct {
	UserId               int32    `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetSubscriptionsRequest) Reset()         { *m = GetSubscriptionsRequest{} }
func (m *GetSubscriptionsRequest) String() string { return proto.CompactTextString(m) }
func (*GetSubscriptionsRequest) ProtoMessage()    {}
func (*GetSubscriptionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscription_c5e9b57aa8061f8e, []int{0}
}
func (m *GetSubscriptionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSubscriptionsRequest.Unmarshal(m, b)
}
func (m *GetSubscriptionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSubscriptionsRequest.Marshal(b, m, deterministic)
}
func (dst *GetSubscriptionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSubscriptionsRequest.Merge(dst, src)
}
func (m *GetSubscriptionsRequest) XXX_Size() int {
	return xxx_messageInfo_GetSubscriptionsRequest.Size(m)
}
func (m *GetSubscriptionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSubscriptionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetSubscriptionsRequest proto.InternalMessageInfo

func (m *GetSubscriptionsRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

type GetSubscriptionsResponse struct {
	SubscriptionItem     []*SubscriptionItem `protobuf:"bytes,1,rep,name=subscription_item,json=subscriptionItem" json:"subscription_item,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GetSubscriptionsResponse) Reset()         { *m = GetSubscriptionsResponse{} }
func (m *GetSubscriptionsResponse) String() string { return proto.CompactTextString(m) }
func (*GetSubscriptionsResponse) ProtoMessage()    {}
func (*GetSubscriptionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscription_c5e9b57aa8061f8e, []int{1}
}
func (m *GetSubscriptionsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetSubscriptionsResponse.Unmarshal(m, b)
}
func (m *GetSubscriptionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetSubscriptionsResponse.Marshal(b, m, deterministic)
}
func (dst *GetSubscriptionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSubscriptionsResponse.Merge(dst, src)
}
func (m *GetSubscriptionsResponse) XXX_Size() int {
	return xxx_messageInfo_GetSubscriptionsResponse.Size(m)
}
func (m *GetSubscriptionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSubscriptionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSubscriptionsResponse proto.InternalMessageInfo

func (m *GetSubscriptionsResponse) GetSubscriptionItem() []*SubscriptionItem {
	if m != nil {
		return m.SubscriptionItem
	}
	return nil
}

type SubscriptionItem struct {
	Id                   int32                `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	FeedItem             *FeedItem            `protobuf:"bytes,2,opt,name=feed_item,json=feedItem" json:"feed_item,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,3,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SubscriptionItem) Reset()         { *m = SubscriptionItem{} }
func (m *SubscriptionItem) String() string { return proto.CompactTextString(m) }
func (*SubscriptionItem) ProtoMessage()    {}
func (*SubscriptionItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscription_c5e9b57aa8061f8e, []int{2}
}
func (m *SubscriptionItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscriptionItem.Unmarshal(m, b)
}
func (m *SubscriptionItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscriptionItem.Marshal(b, m, deterministic)
}
func (dst *SubscriptionItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscriptionItem.Merge(dst, src)
}
func (m *SubscriptionItem) XXX_Size() int {
	return xxx_messageInfo_SubscriptionItem.Size(m)
}
func (m *SubscriptionItem) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscriptionItem.DiscardUnknown(m)
}

var xxx_messageInfo_SubscriptionItem proto.InternalMessageInfo

func (m *SubscriptionItem) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SubscriptionItem) GetFeedItem() *FeedItem {
	if m != nil {
		return m.FeedItem
	}
	return nil
}

func (m *SubscriptionItem) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

type SubscribeRequest struct {
	UserId               int32    `protobuf:"varint,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	FeedId               int32    `protobuf:"varint,2,opt,name=feed_id,json=feedId" json:"feed_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscription_c5e9b57aa8061f8e, []int{3}
}
func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (dst *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(dst, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *SubscribeRequest) GetFeedId() int32 {
	if m != nil {
		return m.FeedId
	}
	return 0
}

type SubscribeResponse struct {
	Status               int32    `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeResponse) Reset()         { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()    {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscription_c5e9b57aa8061f8e, []int{4}
}
func (m *SubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeResponse.Unmarshal(m, b)
}
func (m *SubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeResponse.Marshal(b, m, deterministic)
}
func (dst *SubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeResponse.Merge(dst, src)
}
func (m *SubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_SubscribeResponse.Size(m)
}
func (m *SubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeResponse proto.InternalMessageInfo

func (m *SubscribeResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

type UnsubscribeRequest struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnsubscribeRequest) Reset()         { *m = UnsubscribeRequest{} }
func (m *UnsubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*UnsubscribeRequest) ProtoMessage()    {}
func (*UnsubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscription_c5e9b57aa8061f8e, []int{5}
}
func (m *UnsubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnsubscribeRequest.Unmarshal(m, b)
}
func (m *UnsubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnsubscribeRequest.Marshal(b, m, deterministic)
}
func (dst *UnsubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsubscribeRequest.Merge(dst, src)
}
func (m *UnsubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_UnsubscribeRequest.Size(m)
}
func (m *UnsubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UnsubscribeRequest proto.InternalMessageInfo

func (m *UnsubscribeRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UnsubscribeResponse struct {
	Status               int32    `protobuf:"varint,1,opt,name=status" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnsubscribeResponse) Reset()         { *m = UnsubscribeResponse{} }
func (m *UnsubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*UnsubscribeResponse) ProtoMessage()    {}
func (*UnsubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_subscription_c5e9b57aa8061f8e, []int{6}
}
func (m *UnsubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnsubscribeResponse.Unmarshal(m, b)
}
func (m *UnsubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnsubscribeResponse.Marshal(b, m, deterministic)
}
func (dst *UnsubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsubscribeResponse.Merge(dst, src)
}
func (m *UnsubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_UnsubscribeResponse.Size(m)
}
func (m *UnsubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnsubscribeResponse proto.InternalMessageInfo

func (m *UnsubscribeResponse) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*GetSubscriptionsRequest)(nil), "subscription.getSubscriptionsRequest")
	proto.RegisterType((*GetSubscriptionsResponse)(nil), "subscription.getSubscriptionsResponse")
	proto.RegisterType((*SubscriptionItem)(nil), "subscription.subscriptionItem")
	proto.RegisterType((*SubscribeRequest)(nil), "subscription.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "subscription.SubscribeResponse")
	proto.RegisterType((*UnsubscribeRequest)(nil), "subscription.UnsubscribeRequest")
	proto.RegisterType((*UnsubscribeResponse)(nil), "subscription.UnsubscribeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SubscriptionService service

type SubscriptionServiceClient interface {
	GetSubscriptions(ctx context.Context, in *GetSubscriptionsRequest, opts ...grpc.CallOption) (*GetSubscriptionsResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (SubscriptionService_SubscribeClient, error)
	Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (SubscriptionService_UnsubscribeClient, error)
}

type subscriptionServiceClient struct {
	cc *grpc.ClientConn
}

func NewSubscriptionServiceClient(cc *grpc.ClientConn) SubscriptionServiceClient {
	return &subscriptionServiceClient{cc}
}

func (c *subscriptionServiceClient) GetSubscriptions(ctx context.Context, in *GetSubscriptionsRequest, opts ...grpc.CallOption) (*GetSubscriptionsResponse, error) {
	out := new(GetSubscriptionsResponse)
	err := grpc.Invoke(ctx, "/subscription.SubscriptionService/getSubscriptions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscriptionServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (SubscriptionService_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SubscriptionService_serviceDesc.Streams[0], c.cc, "/subscription.SubscriptionService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &subscriptionServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubscriptionService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type subscriptionServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *subscriptionServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *subscriptionServiceClient) Unsubscribe(ctx context.Context, in *UnsubscribeRequest, opts ...grpc.CallOption) (SubscriptionService_UnsubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SubscriptionService_serviceDesc.Streams[1], c.cc, "/subscription.SubscriptionService/Unsubscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &subscriptionServiceUnsubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SubscriptionService_UnsubscribeClient interface {
	Recv() (*UnsubscribeResponse, error)
	grpc.ClientStream
}

type subscriptionServiceUnsubscribeClient struct {
	grpc.ClientStream
}

func (x *subscriptionServiceUnsubscribeClient) Recv() (*UnsubscribeResponse, error) {
	m := new(UnsubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SubscriptionService service

type SubscriptionServiceServer interface {
	GetSubscriptions(context.Context, *GetSubscriptionsRequest) (*GetSubscriptionsResponse, error)
	Subscribe(*SubscribeRequest, SubscriptionService_SubscribeServer) error
	Unsubscribe(*UnsubscribeRequest, SubscriptionService_UnsubscribeServer) error
}

func RegisterSubscriptionServiceServer(s *grpc.Server, srv SubscriptionServiceServer) {
	s.RegisterService(&_SubscriptionService_serviceDesc, srv)
}

func _SubscriptionService_GetSubscriptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubscriptionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionServiceServer).GetSubscriptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/subscription.SubscriptionService/GetSubscriptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionServiceServer).GetSubscriptions(ctx, req.(*GetSubscriptionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscriptionService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriptionServiceServer).Subscribe(m, &subscriptionServiceSubscribeServer{stream})
}

type SubscriptionService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type subscriptionServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *subscriptionServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SubscriptionService_Unsubscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UnsubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubscriptionServiceServer).Unsubscribe(m, &subscriptionServiceUnsubscribeServer{stream})
}

type SubscriptionService_UnsubscribeServer interface {
	Send(*UnsubscribeResponse) error
	grpc.ServerStream
}

type subscriptionServiceUnsubscribeServer struct {
	grpc.ServerStream
}

func (x *subscriptionServiceUnsubscribeServer) Send(m *UnsubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _SubscriptionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "subscription.SubscriptionService",
	HandlerType: (*SubscriptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getSubscriptions",
			Handler:    _SubscriptionService_GetSubscriptions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _SubscriptionService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Unsubscribe",
			Handler:       _SubscriptionService_Unsubscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "subscription.proto",
}

func init() { proto.RegisterFile("subscription.proto", fileDescriptor_subscription_c5e9b57aa8061f8e) }

var fileDescriptor_subscription_c5e9b57aa8061f8e = []byte{
	// 374 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x4d, 0x4b, 0xeb, 0x50,
	0x10, 0x7d, 0x49, 0x69, 0xde, 0xeb, 0xf4, 0x51, 0xda, 0x29, 0xd8, 0x90, 0x85, 0x8d, 0x17, 0x95,
	0x82, 0x98, 0x4a, 0x5c, 0xb9, 0x14, 0x44, 0x28, 0x6e, 0x24, 0x55, 0xb7, 0x25, 0x1f, 0xd3, 0x10,
	0x30, 0x4d, 0xcc, 0xbd, 0xf1, 0x67, 0xf8, 0x2b, 0xfc, 0xa1, 0x92, 0xaf, 0x9a, 0xa4, 0xb4, 0xdd,
	0xdd, 0xf9, 0x3a, 0xf7, 0x9c, 0x33, 0x03, 0xc8, 0x53, 0x87, 0xbb, 0x49, 0x10, 0x8b, 0x20, 0xda,
	0x18, 0x71, 0x12, 0x89, 0x08, 0xff, 0xd7, 0x73, 0xda, 0xd4, 0x8f, 0x22, 0xff, 0x9d, 0xe6, 0x79,
	0xcd, 0x49, 0xd7, 0x73, 0x11, 0x84, 0xc4, 0x85, 0x1d, 0xc6, 0x45, 0xbb, 0x36, 0x58, 0x13, 0x79,
	0x0b, 0x41, 0x61, 0x11, 0x33, 0x13, 0x26, 0x3e, 0x89, 0x65, 0x0d, 0x83, 0x5b, 0xf4, 0x91, 0x12,
	0x17, 0x38, 0x81, 0xbf, 0x29, 0xa7, 0x64, 0x15, 0x78, 0xaa, 0xa4, 0x4b, 0xb3, 0xae, 0xa5, 0x64,
	0xe1, 0xc2, 0x63, 0x3e, 0xa8, 0xbb, 0x33, 0x3c, 0x8e, 0x36, 0x9c, 0xf0, 0x09, 0x46, 0x75, 0x42,
	0xab, 0x40, 0x50, 0xa8, 0x4a, 0x7a, 0x67, 0xd6, 0x37, 0x4f, 0x8d, 0x06, 0xfd, 0x7a, 0x90, 0x11,
	0xb2, 0x86, 0xed, 0x0c, 0xfb, 0x92, 0x60, 0x27, 0x89, 0x03, 0x90, 0xb7, 0x8c, 0xe4, 0xc0, 0xc3,
	0x39, 0xf4, 0x32, 0x4d, 0xc5, 0x4f, 0xb2, 0x2e, 0xcd, 0xfa, 0x26, 0x1a, 0x5b, 0x95, 0x8f, 0xe5,
	0xc3, 0xfa, 0x57, 0xa5, 0xf0, 0x0e, 0xc0, 0x4d, 0xc8, 0x16, 0xe4, 0xad, 0x6c, 0xa1, 0x76, 0xf2,
	0x09, 0xcd, 0x28, 0x8c, 0x33, 0x2a, 0xe3, 0x8c, 0x97, 0xca, 0x38, 0xab, 0x57, 0x76, 0xdf, 0x0b,
	0xf6, 0x00, 0xc3, 0x52, 0xb6, 0x43, 0xc7, 0x6c, 0xca, 0x0a, 0x05, 0x31, 0x2f, 0xa7, 0xd5, 0xb5,
	0x94, 0x9c, 0x82, 0xc7, 0xae, 0x60, 0x54, 0x43, 0x29, 0x8d, 0x3b, 0x01, 0x85, 0x0b, 0x5b, 0xa4,
	0xbc, 0x42, 0x29, 0x22, 0x76, 0x0e, 0xf8, 0xba, 0xe1, 0xed, 0x4f, 0x5b, 0x26, 0xb0, 0x6b, 0x18,
	0x37, 0xba, 0x0e, 0x83, 0x9a, 0xdf, 0x32, 0x8c, 0xeb, 0xfb, 0x5b, 0x52, 0xf2, 0x19, 0xb8, 0x84,
	0x2e, 0x0c, 0xdb, 0x9b, 0xc5, 0x8b, 0xe6, 0xda, 0xf6, 0x5c, 0x8b, 0x76, 0x79, 0xac, 0xad, 0xa0,
	0xc4, 0xfe, 0xe0, 0x33, 0xf4, 0xb6, 0xf2, 0xb1, 0x75, 0x14, 0x6d, 0x77, 0xb5, 0xe9, 0xde, 0x7a,
	0x85, 0x77, 0x23, 0xe1, 0x1b, 0xf4, 0x6b, 0xea, 0x51, 0x6f, 0xce, 0xec, 0xda, 0xa7, 0x9d, 0x1d,
	0xe8, 0xf8, 0xc5, 0x75, 0x94, 0xfc, 0x1a, 0x6e, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x86, 0xc1,
	0xec, 0x8c, 0x78, 0x03, 0x00, 0x00,
}
